<% layout("/layout/boilerplate.ejs") %>

<body>
  <div class="container mt-4">
    <div class="row justify-content-center">
      <div class="col-md-8">

        <!-- Listing Card -->
        <div class="card shadow p-4 border-0 rounded-4 mb-4">
          <h3 class="fw-bold mb-4"><%= content.title %></h3>
          <img src="<%= content.image.url %>" 
               class="listing-card-img-top rounded-4 mb-3" 
               alt="Listing Image"
               style="height: 360px; object-fit: cover;" />
          <div class="card-body px-0">
            <p class="card-text text-muted mb-2"><%= content.description %></p>
            <p class="mb-1"><strong>₹<%= content.price.toLocaleString("en-IN") %></strong></p>
            <p class="mb-1"><%= content.location %></p>
            <p class="mb-3"><%= content.country %></p>

            <% if (currUser && content.owner && currUser._id.equals(content.owner._id)) { %>
              <div class="d-flex gap-2">
                <a href="/listings/edit/<%= content._id %>" class="btn btn-danger px-4">Edit</a>
                <form method="POST" action="/listings/delete/<%= content._id %>?_method=DELETE">
                  <button type="submit" class="btn btn-dark px-4">Delete</button>
                </form>
              </div>
            <% } %>
          </div>
        </div>

        <!-- Review Form -->
        <% if (currUser) { %>
        <div class="card shadow p-4 border-0 rounded-4 mb-4">
          <h4 class="mb-3">Leave A Review</h4>
          <form method="POST" action="/listings/<%= content._id %>/reviews" novalidate class="needs-validation">

            <!-- Starability Rating -->
            <fieldset class="starability-heartbeat">
              <legend>First rating:</legend>

              <input type="radio" id="no-rate" class="input-no-rate" name="review[rating]" value="0" checked aria-label="No rating." />
              <input type="radio" id="first-rate1" name="review[rating]" value="1" />
              <label for="first-rate1" title="Terrible">1 star</label>

              <input type="radio" id="first-rate2" name="review[rating]" value="2" />
              <label for="first-rate2" title="Not good">2 stars</label>

              <input type="radio" id="first-rate3" name="review[rating]" value="3" />
              <label for="first-rate3" title="Average">3 stars</label>

              <input type="radio" id="first-rate4" name="review[rating]" value="4" />
              <label for="first-rate4" title="Very good">4 stars</label>

              <input type="radio" id="first-rate5" name="review[rating]" value="5" />
              <label for="first-rate5" title="Amazing">5 stars</label>
            </fieldset>

            <!-- Comment Box -->
            <div class="mb-3">
              <label for="comment" class="form-label">Comments</label>
              <textarea id="comment" name="review[comment]" cols="30" rows="5" class="form-control" required></textarea>
              <div class="invalid-feedback">Please enter a valid review</div>
            </div>
            <button type="submit" class="btn btn-danger px-4">Submit</button>
          </form>
        </div>
        <% } %>
        
        <!-- Map Section -->
        <div class="mb-3">
           <h4 class="mb-3">Where you’ll be</h4>
          <div id="map"></div>
        </div>


        <!-- All Reviews Section -->
        <div>
          <h4 class="mb-3">All Reviews</h4>

          <% if (content.reviews.length === 0) { %>
            <p class="text-muted">No reviews yet. Be the first to review!</p>
          <% } %>

          <div class="row row-cols-1 g-3">
            <% for (let review of content.reviews) { %>
              <div class="col">
                <div class="card border-0 shadow-sm rounded-4">
                  <div class="card-body">
                    <h6 class="card-subtitle mb-2 text-muted"><%= review.author.username %></h6>
                    <p class="card-text mb-1"><%= review.comment %></p>
                    <p class="starability-result" data-rating="<%= review.rating %>"></p>
                    <% if (currUser && review.author && currUser._id.equals(review.author._id)) { %>
                      <form method="POST" class="mt-2" action="/listings/<%= content._id %>/reviews/<%= review._id %>?_method=DELETE">
                        <button class="btn btn-danger px-4">Delete</button>
                      </form>
                    <% } %>
                  </div>
                </div>
              </div>
            <% } %>
          </div>
        </div>

      </div>
    </div>
  </div>

  <!-- Leaflet CSS and JS -->
  <link rel="stylesheet" href="https://unpkg.com/leaflet/dist/leaflet.css" />
  <script src="https://unpkg.com/leaflet/dist/leaflet.js"></script>

  <style>
    #map {
      height: 400px;
      width: 100%;
      border-radius: 12px;
      margin-top: 20px;
    }
  </style>

  <script>
  // Custom Marker Icon
  const customIcon = L.icon({
    iconUrl: "/logo-final.png",
    iconSize: [40, 40],
    iconAnchor: [20, 40],
    popupAnchor: [0, -40]
  });

  // Geocode using OpenStreetMap (Nominatim)
  async function geocodeLocation(location, country) {
    try {
      // Format query: "Location, Country" (improves accuracy)
      const query = `${location}, ${country}`;
      const url = `https://nominatim.openstreetmap.org/search?format=json&q=${encodeURIComponent(query)}`;
      const response = await fetch(url);
      const data = await response.json();

      if (data.length > 0) {
        return [parseFloat(data[0].lat), parseFloat(data[0].lon)];
      }
      return null;
    } catch (error) {
      console.error("Geocoding failed:", error);
      return null;
    }
  }

  // Get default coordinates for a country (fallback)
  function getCountryCentroid(country) {
    const countryCentroids = {
      "India": [20.5937, 78.9629],
      "Maldives": [3.2028, 73.2207],
      "Thailand": [15.8700, 100.9925],
      // Add more countries as needed
    };
    return countryCentroids[country] || [0, 0]; // Fallback to null island
  }

  document.addEventListener("DOMContentLoaded", async () => {
    const location = "<%= content.location %>";
    const country = "<%= content.country %>";
    let coords = await geocodeLocation(location, country);

    // If API fails, use the country's centroid as fallback
    if (!coords) {
      coords = getCountryCentroid(country);
      console.warn("Falling back to country centroid.");
    }

    // Initialize Map
    const map = L.map('map').setView(coords, 10);
    L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
      attribution: '© OpenStreetMap contributors'
    }).addTo(map);

    // Add Marker
    const marker = L.marker(coords, { icon: customIcon })
      .addTo(map)
      .bindPopup(`<b><%= content.title %></b><br>${location}, ${country}`);

    // If fallback was used, show a warning
    if (!coords || coords[0] === 0) {
      marker.bindPopup(`<b>⚠️ Approximate Location</b><br>${location}, ${country}`).openPopup();
      document.getElementById('map').insertAdjacentHTML(
        'afterend',
        `<div class="alert alert-warning mt-3">
           <small>Exact location not found. Showing approximate region.</small>
         </div>`
      );
    }
  });
</script>